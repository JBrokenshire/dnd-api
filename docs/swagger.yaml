basePath: /
definitions:
  requests.CreateCharacterRequest:
    properties:
      class_id:
        type: integer
      name:
        maxLength: 200
        type: string
      race_id:
        type: integer
    required:
    - class_id
    - name
    - race_id
    type: object
  requests.CreateClassRequest:
    properties:
      name:
        example: Barbarian
        maxLength: 200
        type: string
    required:
    - name
    type: object
  requests.CreateRaceRequest:
    properties:
      name:
        example: Barbarian
        maxLength: 200
        type: string
    required:
    - name
    type: object
  requests.LoginRequest:
    properties:
      password:
        type: string
      username:
        type: string
    required:
    - password
    - username
    type: object
  requests.UpdateCharacterRequest:
    properties:
      class_id:
        type: integer
      name:
        maxLength: 200
        type: string
      race_id:
        type: integer
    required:
    - class_id
    - name
    - race_id
    type: object
  requests.UpdateClassRequest:
    properties:
      name:
        example: Barbarian
        maxLength: 200
        type: string
    required:
    - name
    type: object
  requests.UpdateRaceRequest:
    properties:
      name:
        example: Barbarian
        maxLength: 200
        type: string
    required:
    - name
    type: object
  responses.CharacterPaginatedResponse:
    properties:
      data:
        items:
          $ref: '#/definitions/responses.CharacterResponse'
        type: array
      meta:
        $ref: '#/definitions/responses.ResponseMeta'
    type: object
  responses.CharacterResponse:
    properties:
      class:
        $ref: '#/definitions/responses.ClassResponse'
      class_id:
        type: integer
      id:
        type: integer
      name:
        type: string
      race:
        $ref: '#/definitions/responses.RaceResponse'
      race_id:
        type: integer
      user_id:
        type: integer
    type: object
  responses.ClassPaginatedResponse:
    properties:
      data:
        items:
          $ref: '#/definitions/responses.ClassResponse'
        type: array
      meta:
        $ref: '#/definitions/responses.ResponseMeta'
    type: object
  responses.ClassResponse:
    properties:
      id:
        type: integer
      name:
        type: string
    type: object
  responses.Data:
    properties:
      code:
        type: integer
      message:
        type: string
    type: object
  responses.Error:
    properties:
      code:
        type: integer
      error:
        type: string
    type: object
  responses.LoginResponse:
    properties:
      accessToken:
        type: string
      authorised:
        type: boolean
      enabled:
        description: Does the user have 2FA enabled?
        type: boolean
      exp:
        type: integer
    type: object
  responses.LoginUserResponse:
    properties:
      id:
        type: integer
      username:
        type: string
    type: object
  responses.RacePaginatedResponse:
    properties:
      data:
        items:
          $ref: '#/definitions/responses.RaceResponse'
        type: array
      meta:
        $ref: '#/definitions/responses.ResponseMeta'
    type: object
  responses.RaceResponse:
    properties:
      id:
        type: integer
      name:
        type: string
    type: object
  responses.RefreshResponse:
    properties:
      access_token:
        type: string
      exp:
        type: integer
      user_data:
        $ref: '#/definitions/responses.LoginUserResponse'
    type: object
  responses.ResponseMeta:
    properties:
      page:
        example: 3
        type: integer
      page_size:
        example: 25
        type: integer
      total_count:
        example: 300
        type: integer
    type: object
info:
  contact:
    email: jbrokenshire0306@gmail.com
    name: Jared Brokenshire
  description: A management solution for Dungeons & Dragons character sheet information
  title: D&D Character Dashboard
  version: 0.0.1
paths:
  /auth/login:
    post:
      consumes:
      - application/json
      description: Log a user in
      operationId: auth-login
      parameters:
      - description: User's credentials
        in: body
        name: params
        required: true
        schema:
          $ref: '#/definitions/requests.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/responses.LoginResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/responses.Error'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/responses.Error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/responses.Error'
      summary: User Login
      tags:
      - Auth Actions
  /auth/logout:
    get:
      consumes:
      - application/json
      description: Set's the refresh cookie to an expired date and clears token.
      operationId: auth-logout
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/responses.Data'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/responses.Error'
      summary: Log User Out
      tags:
      - Auth Actions
  /auth/refresh:
    get:
      consumes:
      - application/json
      description: Perform refresh access token
      operationId: auth-refresh
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/responses.RefreshResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/responses.Error'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/responses.Error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/responses.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/responses.Error'
      summary: Refresh access token
      tags:
      - Auth Actions
  /characters:
    get:
      consumes:
      - application/json
      description: List characters (paginated)
      operationId: characters-list
      parameters:
      - description: Search characters by name
        in: query
        name: search
        type: string
      - description: The page number
        in: query
        name: page
        type: integer
      - description: The numbers of items to return. Max 100
        in: query
        name: page_size
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/responses.CharacterPaginatedResponse'
      summary: List characters
      tags:
      - Character Actions
    post:
      consumes:
      - application/json
      description: Create character
      operationId: characters-create
      parameters:
      - description: Character information
        in: body
        name: params
        required: true
        schema:
          $ref: '#/definitions/requests.CreateCharacterRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/responses.CharacterResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/responses.Error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/responses.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/responses.Error'
      summary: Create character
      tags:
      - Character Actions
  /characters/{id}:
    delete:
      consumes:
      - application/json
      description: Delete character
      operationId: characters-delete
      parameters:
      - description: Character ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/responses.Data'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/responses.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/responses.Error'
      summary: Delete character
      tags:
      - Character Actions
    get:
      consumes:
      - application/json
      description: Get character by ID
      operationId: characters-get
      parameters:
      - description: Character ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/responses.CharacterResponse'
      summary: Get character by ID
      tags:
      - Character Actions
    put:
      consumes:
      - application/json
      description: Update character
      operationId: characters-update
      parameters:
      - description: Character ID
        in: path
        name: id
        required: true
        type: integer
      - description: Character information
        in: body
        name: params
        required: true
        schema:
          $ref: '#/definitions/requests.UpdateCharacterRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/responses.CharacterResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/responses.Error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/responses.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/responses.Error'
      summary: Update character
      tags:
      - Character Actions
  /classes:
    get:
      consumes:
      - application/json
      description: List classes (paginated)
      operationId: classes-list
      parameters:
      - description: Search classes by name
        in: query
        name: search
        type: string
      - description: The page number
        in: query
        name: page
        type: integer
      - description: The numbers of items to return. Max 100
        in: query
        name: page_size
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/responses.ClassPaginatedResponse'
      summary: List classes
      tags:
      - Class Actions
    post:
      consumes:
      - application/json
      description: Create class
      operationId: classes-create
      parameters:
      - description: Class information
        in: body
        name: params
        required: true
        schema:
          $ref: '#/definitions/requests.CreateClassRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/responses.ClassResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/responses.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/responses.Error'
      summary: Create class
      tags:
      - Class Actions
  /classes/{id}:
    delete:
      consumes:
      - application/json
      description: Delete class
      operationId: classes-delete
      parameters:
      - description: Class ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/responses.Data'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/responses.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/responses.Error'
      summary: Delete class
      tags:
      - Class Actions
    get:
      consumes:
      - application/json
      description: Get class by ID
      operationId: classes-get
      parameters:
      - description: ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/responses.ClassResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/responses.Error'
      summary: Get class by ID
      tags:
      - Class Actions
    put:
      consumes:
      - application/json
      description: Update class
      operationId: classes-update
      parameters:
      - description: Class ID
        in: path
        name: id
        required: true
        type: string
      - description: Class information
        in: body
        name: params
        required: true
        schema:
          $ref: '#/definitions/requests.UpdateClassRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/responses.ClassResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/responses.Error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/responses.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/responses.Error'
      summary: Update class
      tags:
      - Class Actions
  /races:
    get:
      consumes:
      - application/json
      description: List races (paginated)
      operationId: races-list
      parameters:
      - description: Search races by name
        in: query
        name: search
        type: string
      - description: The page number
        in: query
        name: page
        type: integer
      - description: The numbers of items to return. Max 100
        in: query
        name: page_size
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/responses.RacePaginatedResponse'
      summary: List races
      tags:
      - Race Actions
    post:
      consumes:
      - application/json
      description: Create race
      operationId: races-create
      parameters:
      - description: Race information
        in: body
        name: params
        required: true
        schema:
          $ref: '#/definitions/requests.CreateRaceRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/responses.RaceResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/responses.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/responses.Error'
      summary: Create race
      tags:
      - Race Actions
  /races/{id}:
    delete:
      consumes:
      - application/json
      description: Delete race
      operationId: races-delete
      parameters:
      - description: Race ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/responses.Data'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/responses.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/responses.Error'
      summary: Delete race
      tags:
      - Race Actions
    get:
      consumes:
      - application/json
      description: Get race by ID
      operationId: races-get
      parameters:
      - description: ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/responses.RaceResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/responses.Error'
      summary: Get race by ID
      tags:
      - Race Actions
    put:
      consumes:
      - application/json
      description: Update race
      operationId: races-update
      parameters:
      - description: Race ID
        in: path
        name: id
        required: true
        type: string
      - description: Race information
        in: body
        name: params
        required: true
        schema:
          $ref: '#/definitions/requests.UpdateRaceRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/responses.RaceResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/responses.Error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/responses.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/responses.Error'
      summary: Update race
      tags:
      - Race Actions
swagger: "2.0"
